unless Vagrant.has_plugin?("vagrant-proxyconf")
  raise 'vagrant-proxyconf is not installed!'
end


def createNode(node, i)
  vb_folder = `VBoxManage list systemproperties | grep 'Default machine folder'`
  vb_folder = vb_folder.match(/^Default machine folder:\s+(.+)$/)[1]
  project_name = '/' + File.basename(File.dirname(File.expand_path(__FILE__)))
  node.vm.box = "rhel-7.6"
  node.vm.network "private_network", ip: "192.168.10.1#{i}", :mac => "5CA1AB1E000#{i}"
  node.vm.hostname = "bcsvm-#{i}"
  node.vm.provider :virtualbox do |vb|
    drive_file = "sdb.vdi"
    drive_fp = File.join(vb_folder, project_name, node.vm.hostname, drive_file)
    next if File.exist?(drive_fp)
    drive_port = 1
    # Syncing time to host since time servers are not accessible through proxy
    vb.customize ['guestproperty', 'set', :id,
                  '/VirualBox/GuestAdd/VBoxService/--timesync-set-threshold", 500']
    # Audio device is not needed and can cause high cpu usage
    vb.customize ['modifyvm', :id, '--audio', 'none']
    vb.customize ['createhd', '--filename', drive_fp,
                  '--size', 32 * 1024]
    vb.customize [
                     'storageattach', :id,
                     '--storagectl', 'SATA Controller',
                     '--type', 'hdd',
                     '--device', 0,
                     '--port', drive_port,
                     '--medium', drive_fp
                 ]
  end
  node.vm.provision "file", source: "operations", destination: "/home/vagrant/.ssh/operations"
  public_key = File.read("operations.pub")
  node.vm.provision "file", source: "bashrc", destination: "/home/vagrant/.bashrc"
  node.vm.provision "file", source: "krb5.conf", destination: "/home/vagrant/krb5.conf"
  node.vm.provision :shell, privileged: true, inline: <<-SHELL
        cp /home/vagrant/krb5.conf /etc/krb5.conf
  SHELL
  node.vm.provision :shell, privileged: false, inline: <<-SHELL
        echo 'Copying ansible-vm public SSH Keys to the VM'
        mkdir -p /home/vagrant/.ssh
        chmod 700 /home/vagrant/.ssh
        echo '#{public_key}' >> /home/vagrant/.ssh/authorized_keys
        chmod -R 600 /home/vagrant/.ssh/authorized_keys
        echo 'IdentityFile /home/vagrant/.ssh/operations' >> /home/vagrant/.ssh/config
        echo 'StrictHostKeyChecking no' >> /home/vagrant/.ssh/config
        echo 'UserKnownHostsFile /dev/null' >> /home/vagrant/.ssh/config
        chmod -R 600 /home/vagrant/.ssh/config
        chmod 400 /home/vagrant/.ssh/operations
  SHELL
  node.vm.provision "shell", inline: <<-SHELL
        echo "192.168.10.11 bcsvm-1 s3.vm.dev.obdc.bcs.bloomberg.com" | tee -a /etc/hosts
        echo "192.168.10.12 bcsvm-2" | tee -a /etc/hosts
        echo "192.168.10.13 bcsvm-3" | tee -a /etc/hosts
        echo "192.168.10.14 bcsvm-4" | tee -a /etc/hosts
        yum clean all
        yum makecache
  SHELL
end


Vagrant.configure("2") do |config|
  config.ssh.forward_agent = true
  (2..4).each do |i|
    # Setup vms - its network and hdd's
    config.vm.define "bcsvm-#{i}" do |node|
      createNode(node, i)
    end
  end
  # Special setup on bcsvm-1 (primary instance)
  config.vm.define "bcsvm-1", primary: true do |node|
    createNode(node, 1)
    node.vm.provision "file", source: "BBrootNEW.cer", destination: "/home/vagrant/BBrootNew.pem"
    node.vm.provision "file", source: "pip.conf", destination: "/home/vagrant/.config/pip/pip.conf"
    node.vm.provision "file", source: "bcs-ansible.env", destination: "/home/vagrant/bcs-ansible.env"
    node.vm.provision "file", source: "bb_dpkg_setup.sh", destination: "/home/vagrant/bb_dpkg_setup.sh"
    node.vm.provision "file", source: "inventory.toml", destination: "/home/vagrant/inventory.toml"
    node.vm.provision "shell", inline: <<-SHELL
      echo "Installing dependencies"
      mkdir -p /opt/bb/bcs-ansible-inv
      chown vagrant:vagrant /opt/bb/bcs-ansible-inv
      mkdir -p /opt/bcs-utils
      chown vagrant:vagrant /opt/bcs-utils
      mkdir -p /opt/bb/ceph-ansible
      chown vagrant:vagrant /opt/bb/ceph-ansible
    SHELL
    node.vm.provision :shell, privileged: false, inline: <<-SHELL
      ssh-keyscan -H bbgithub.dev.bloomberg.com >> ~/.ssh/known_hosts
      echo 'Cloning BCS repositories to the VM'
    SHELL
    node.vm.provision :shell, :inline => "
      git -c http.proxy=http://proxy.internal.bloomberg.com:80 clone https://1631430b02cdbf56a22064427d5b46d5a4c06406@bbgithub.dev.bloomberg.com/BCS/bcs-ansible-inv.git /opt/bb/bcs-ansible-inv
      git -c http.proxy=http://proxy.internal.bloomberg.com:80 clone https://1631430b02cdbf56a22064427d5b46d5a4c06406@bbgithub.dev.bloomberg.com/BCS/bcs-utils.git /opt/bcs-utils
      git -c http.proxy=http://proxy.internal.bloomberg.com:80 clone https://1631430b02cdbf56a22064427d5b46d5a4c06406@bbgithub.dev.bloomberg.com/BCS/bcs-ceph-ansible.git /opt/bb/ceph-ansible
      cp /home/vagrant/bcs-ansible.env /opt/bb/bcs-ansible-inv/.env
      ", privileged: false
    node.vm.provision "shell", inline: <<-SHELL
      cd /opt/bb/bcs-ansible-inv; git checkout 8e7970a
      cd /opt/bcs-utils; git checkout 3eb2c9e
      cd /opt/bb/ceph-ansible; git checkout 8586f4a
      cp /home/vagrant/bcs-ansible.env /opt/bb/bcs-ansible-inv/.env
      cp /home/vagrant/inventory.toml  /opt/bb/bcs-ansible-inv/inventory.toml
    SHELL
    node.vm.provision :shell, privileged: false, inline: <<-SHELL
      cd /opt/bb/bcs-ansible-inv
      pipenv install
      set -a
      source /opt/bb/bcs-ansible-inv/.env
      set +a
      cd /opt/bb/ceph-ansible
      cp site.yml.sample site.yml
      ANSIBLE_LOG_PATH=./ansible.log PIPENV_PIPFILE=/opt/bb/bcs-ansible-inv/Pipfile pipenv run ansible-playbook -i '/opt/bb/bcs-ansible-inv/inventory_provider/inv_v2/inventory.py' --key-file=/home/vagrant/.ssh/operations site.yml
      # Address drift issue in VirtualBox
      PIPENV_PIPFILE=/opt/bb/bcs-ansible-inv/Pipfile pipenv run ansible -i '/opt/bb/bcs-ansible-inv/inventory_provider/inv_v2/inventory.py' -m lineinfile -a 'path=/etc/ceph/ceph.conf line="[mon]" insertafter=EOF' --become  mons
      PIPENV_PIPFILE=/opt/bb/bcs-ansible-inv/Pipfile pipenv run ansible -i '/opt/bb/bcs-ansible-inv/inventory_provider/inv_v2/inventory.py' -m lineinfile -a 'path=/etc/ceph/ceph.conf line="mon clock drift allowed = 10" insertafter="[mon]"' --become  mons
      PIPENV_PIPFILE=/opt/bb/bcs-ansible-inv/Pipfile pipenv run ansible -i '/opt/bb/bcs-ansible-inv/inventory_provider/inv_v2/inventory.py' -m systemd -a 'name=ceph-mon.target state=restarted' --become  mons
    SHELL
  end
end
